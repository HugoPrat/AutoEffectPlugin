name: Release

on:
  push:
    branches: [ "main"]

jobs:

  # First job, creating a release
  create_release:
    name: Create Release
    # Os used not important, ubuntu used because it's a little more fast to setup
    runs-on: ubuntu-latest
    # Declare what are gonna be the output of the job, here url of the release
    outputs:
      url: ${{ steps.set_output.outputs.url }}
    # Checkout files and create release
    steps:
      - uses: actions/checkout@v3
      - name: version
        run: echo "::set-output name=version::$(cat VERSION.txt)"
        id: version
      - name: release initialization
        uses: actions/create-release@v1
        id: release_initialization
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: refs/tags/${{ github.run_id }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: set output
        id: set_output
        run: echo "::set-output name=url::${{ steps.release_initialization.outputs.upload_url }}"

  # Second job, wait for first one to end
  build_release:
    name: Build Release
    needs: create_release
    strategy:
    # Using matrix to launch this job on multiple Os
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest] Not windows yet
        os: [ubuntu-latest, macos-latest]
        # Declare different release_suffix in depend of Os
        include:
          - os: ubuntu-latest
            release_suffix: Ubuntu
          - os: macos-latest
            release_suffix: MacOs
#          - os: windows-latest
#            release_suffix: windows

    # Where the matrix 'loop' start
    runs-on: ${{ matrix.os }}
    steps:
    # Checkout files and submodules with the private ssh key as secret of the repo (for private submodule)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
          submodules: 'recursive'

      # Install and download what each Os need to
      - name: Install Prerequisites Linux      
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libasound2-dev

      - name: Download Libtorch Linux
        if: matrix.os == 'ubuntu-latest'
        run: wget -O libtorch.zip https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.11.0%2Bcpu.zip

      - name: Download Libtorch MacOs
        if: matrix.os == 'macos-latest'
        run: wget -O libtorch.zip https://download.pytorch.org/libtorch/cpu/libtorch-macos-1.11.0.zip

#      - name: Download Libtorch Windows
#        if: matrix.os == 'windows-latest'
#        run: wget -O libtorch.zip https://download.pytorch.org/libtorch/cpu/libtorch-win-shared-with-deps-1.11.0%2Bcpu.zip

      - name: Unzip it
        run: unzip libtorch.zip

      # Building target steps
      - name: Generate targets
        run: cmake -DDEPLOY:BOOL=TRUE -B Builds
      - name: build all target
        run: cmake --build Builds --config Release

      #Copy libtorch needed libs to result format products, not the best way yet
      - name: Copy lib to app result location
        run: |
          cp libtorch/lib/libc10.dylib libtorch/lib/libtorch.dylib libtorch/lib/libtorch_cpu.dylib libtorch/lib/libiomp5.dylib Builds/result/Standalone/AutoEffect.app/Contents/
          cp libtorch/lib/libc10.dylib libtorch/lib/libtorch.dylib libtorch/lib/libtorch_cpu.dylib libtorch/lib/libiomp5.dylib Builds/result/AU/AutoEffect.component/Contents/
          cp libtorch/lib/libc10.dylib libtorch/lib/libtorch.dylib libtorch/lib/libtorch_cpu.dylib libtorch/lib/libiomp5.dylib Builds/result/VST3/AutoEffect.vst3/Contents/

      - name: Create release zip
        run: zip -r autoEffect${{ matrix.release_suffix }}sRelease.zip Builds/AutoEffect_artefacts/*

      # Uploading zip with the Url passed through needs env
      - name: upload zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{needs.create_release.outputs.url}}
          asset_path: ./autoEffect${{ matrix.release_suffix }}sRelease.zip
          asset_name: autoEffect${{ matrix.release_suffix }}sRelease.zip
          asset_content_type: application/zip
